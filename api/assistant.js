// api/assistant.js - BACKEND INTELIGENTE CON CLAUDE-FIRST Y TOOL-USE

export const config = {
  runtime: 'edge',
  maxDuration: 30,
};

// ============= CASOS DE √âXITO REALES VENTAPEL =============
const CASOS_EXITO_REALES = {
  'honda': {
    empresa: 'Honda Argentina',
    sector: 'Automotriz',
    problema: 'Velocidad limitada, 1% p√©rdidas, problemas ergon√≥micos',
    solucion: 'BP555 + Fita Gorilla 300m',
    resultados: {
      velocidad: '+40%',
      perdidas: '100% eliminadas',
      roi_meses: 3,
      inversion: 150000,
      ahorro_anual: 600000
    }
  },
  'loreal': {
    empresa: "L'Or√©al Brasil",
    sector: 'Cosm√©tica',
    problema: '+10% p√©rdidas por robo, cuellos de botella',
    solucion: 'RSA + Fita Gorilla 700m',
    resultados: {
      robos: '100% eliminados',
      eficiencia: '+50%',
      roi_meses: 3,
      inversion: 280000,
      ahorro_anual: 2500000
    }
  },
  'nike': {
    empresa: 'Nike Brasil',
    sector: 'Calzado/Textil',
    problema: '10% p√©rdidas en transporte',
    solucion: 'BP755 + Fita Gorilla 300m',
    resultados: {
      perdidas: '100% eliminadas',
      eficiencia: '+30%',
      roi_meses: 2,
      inversion: 200000,
      ahorro_anual: 1200000
    }
  },
  'mercadolibre': {
    empresa: 'MercadoLibre',
    sector: 'E-commerce',
    problema: 'Alto retrabajo, p√©rdidas en fulfillment',
    solucion: 'BP555e + Fita VENOM',
    resultados: {
      retrabajo: '-40%',
      ahorro_mensual: 180000,
      roi_meses: 2,
      inversion: 360000
    }
  }
};

// ============= HELPERS =============
function getScaleValue(scale) {
  if (!scale) return 0;
  if (typeof scale === 'object' && scale.score !== undefined) return scale.score;
  if (typeof scale === 'number') return scale;
  return 0;
}

function calculateHealthScore(scales) {
  if (!scales) return 0;
  const values = [
    getScaleValue(scales.dor),
    getScaleValue(scales.poder),
    getScaleValue(scales.visao),
    getScaleValue(scales.valor),
    getScaleValue(scales.controle),
    getScaleValue(scales.compras)
  ];
  const sum = values.reduce((acc, val) => acc + val, 0);
  return values.length > 0 ? (sum / values.length).toFixed(1) : 0;
}

// ============= FUNCIONES LOCALES (HERRAMIENTAS) =============
function analyzeOpportunityLocal(opp) {
  if (!opp) return "‚ùå No hay oportunidad seleccionada.";
  
  const daysSince = opp.last_update ? 
    Math.floor((new Date() - new Date(opp.last_update)) / (1000 * 60 * 60 * 24)) : 999;
  
  const healthScore = calculateHealthScore(opp.scales);
  const dorScore = getScaleValue(opp.scales?.dor);
  const poderScore = getScaleValue(opp.scales?.poder);
  
  let analysis = `üìä **AN√ÅLISIS DE ${opp.client}**\n\n`;
  
  analysis += `üí∞ **Valor:** R$ ${(opp.value || 0).toLocaleString('pt-BR')}\n`;
  analysis += `üìà **Etapa:** ${opp.stage} | Prob: ${opp.probability}%\n`;
  analysis += `‚ù§Ô∏è **Health:** ${healthScore}/10\n`;
  analysis += `üìÖ **√öltimo contacto:** ${daysSince} d√≠as\n\n`;
  
  // Diagn√≥stico principal
  if (daysSince > 30) {
    analysis += `üî¥ **DIAGN√ìSTICO: DEAL MUERTO**\n`;
    analysis += `${daysSince} d√≠as sin contacto. Requiere reactivaci√≥n urgente.\n\n`;
  } else if (dorScore < 5) {
    analysis += `‚ö†Ô∏è **DIAGN√ìSTICO: SIN DOLOR = SIN VENTA**\n`;
    analysis += `Dolor en ${dorScore}/10. Cliente no admite problema.\n\n`;
  } else if (poderScore < 5) {
    analysis += `‚ö†Ô∏è **DIAGN√ìSTICO: SIN ACCESO AL DECISOR**\n`;
    analysis += `Poder en ${poderScore}/10. No llegas a quien firma.\n\n`;
  } else {
    analysis += `‚úÖ **DIAGN√ìSTICO: OPORTUNIDAD VIABLE**\n\n`;
  }
  
  // Acci√≥n inmediata
  analysis += `**üéØ ACCI√ìN INMEDIATA:**\n`;
  if (daysSince > 7) {
    analysis += `‚òéÔ∏è **Llamar HOY** para reactivar\n`;
  } else if (dorScore < 5) {
    analysis += `üìû **Aplicar t√©cnica SPIN** para elevar dolor\n`;
  } else if (!opp.power_sponsor) {
    analysis += `üéØ **Identificar Power Sponsor** esta semana\n`;
  } else {
    analysis += `‚úÖ **Avanzar a siguiente etapa** del pipeline\n`;
  }
  
  return analysis;
}

function generatePainStrategy(opp) {
  if (!opp) return "‚ùå No hay oportunidad seleccionada";
  
  const painScore = getScaleValue(opp.scales?.dor) || 0;
  const monthlyBoxes = Math.round(opp.value / 100);
  const monthlyLoss = Math.round(opp.value * 0.1);
  const annualLoss = monthlyLoss * 12;
  
  let strategy = `üéØ **ESTRATEGIA SPIN PARA ${opp.client}**\n\n`;
  strategy += `**Dolor actual:** ${painScore}/10 ‚Üí **Meta:** 8+/10\n\n`;
  
  strategy += `**üìû SCRIPT DE LLAMADA (10 minutos):**\n\n`;
  
  strategy += `**1. SITUACI√ìN (1 min):**\n`;
  strategy += `"${opp.sponsor || 'Hola'}, vi que procesan ${monthlyBoxes.toLocaleString('pt-BR')} cajas/mes. ¬øCorrecto?"\n\n`;
  
  strategy += `**2. PROBLEMA (3 min):**\n`;
  strategy += `‚Ä¢ "¬øQu√© % de cajas llegan violadas al cliente?"\n`;
  strategy += `‚Ä¢ "¬øCu√°nto tiempo dedican a re-embalar?"\n`;
  strategy += `‚Ä¢ "¬øCu√°ntos reclamos reciben por mes?"\n\n`;
  
  strategy += `**3. IMPLICACI√ìN (4 min) - CREAR DOLOR:**\n`;
  strategy += `‚Ä¢ "Con 10% de violaci√≥n, son ${Math.round(monthlyBoxes * 0.1).toLocaleString('pt-BR')} cajas/mes"\n`;
  strategy += `‚Ä¢ "A R$35 por retrabajo = R$ ${monthlyLoss.toLocaleString('pt-BR')}/mes"\n`;
  strategy += `‚Ä¢ "Eso es R$ ${annualLoss.toLocaleString('pt-BR')}/a√±o tirados a la basura"\n`;
  strategy += `‚Ä¢ "¬øTu competencia tiene este problema?"\n\n`;
  
  strategy += `**4. NECESIDAD (2 min):**\n`;
  strategy += `‚Ä¢ "Si eliminaran 95% de violaciones, ¬øqu√© impacto tendr√≠a?"\n`;
  strategy += `‚Ä¢ "¬øVale la pena invertir 3 meses de p√©rdidas para eliminarlo para siempre?"\n\n`;
  
  // Caso de √©xito relevante
  const caso = opp.industry?.toLowerCase().includes('commerce') ? 'MercadoLibre' : 'Nike';
  strategy += `**üí° MENCIONAR:** "${caso} ten√≠a el mismo problema, hoy ahorra R$ ${caso === 'MercadoLibre' ? '180.000' : '100.000'}/mes"`;
  
  return strategy;
}

function calculateROI(opp) {
  if (!opp) return "‚ùå No hay oportunidad seleccionada";
  
  const monthlyBoxes = Math.round(opp.value / 100);
  const violationRate = 0.10; // 10% est√°ndar Brasil
  const reworkCost = 35; // R$ por caja
  const monthlyLoss = Math.round(monthlyBoxes * violationRate * reworkCost);
  
  // Inversi√≥n seg√∫n volumen
  let investment, solution;
  if (monthlyBoxes < 5000) {
    investment = 45000;
    solution = "BP222 + Gorilla 300m";
  } else if (monthlyBoxes < 20000) {
    investment = 95000;
    solution = "BP555e + VENOM";
  } else {
    investment = 180000;
    solution = "BP755 + Gorilla 700m";
  }
  
  const monthlySavings = Math.round(monthlyLoss * 0.95); // 95% reducci√≥n
  const paybackMonths = Math.ceil(investment / monthlySavings);
  const annualROI = Math.round(((monthlySavings * 12 - investment) / investment) * 100);
  
  let roi = `üí∞ **ROI PERSONALIZADO - ${opp.client}**\n\n`;
  
  roi += `**üìä N√öMEROS ACTUALES:**\n`;
  roi += `‚Ä¢ Volumen: ${monthlyBoxes.toLocaleString('pt-BR')} cajas/mes\n`;
  roi += `‚Ä¢ Violadas (10%): ${Math.round(monthlyBoxes * violationRate).toLocaleString('pt-BR')} cajas\n`;
  roi += `‚Ä¢ P√©rdida mensual: R$ ${monthlyLoss.toLocaleString('pt-BR')}\n`;
  roi += `‚Ä¢ P√©rdida anual: R$ ${(monthlyLoss * 12).toLocaleString('pt-BR')}\n\n`;
  
  roi += `**‚úÖ SOLUCI√ìN VENTAPEL:**\n`;
  roi += `‚Ä¢ Equipamiento: ${solution}\n`;
  roi += `‚Ä¢ Inversi√≥n: R$ ${investment.toLocaleString('pt-BR')}\n`;
  roi += `‚Ä¢ Reducci√≥n violaciones: 95%\n\n`;
  
  roi += `**üìà RESULTADOS:**\n`;
  roi += `‚Ä¢ Ahorro mensual: R$ ${monthlySavings.toLocaleString('pt-BR')}\n`;
  roi += `‚Ä¢ Ahorro anual: R$ ${(monthlySavings * 12).toLocaleString('pt-BR')}\n`;
  roi += `‚Ä¢ **PAYBACK: ${paybackMonths} MESES**\n`;
  roi += `‚Ä¢ ROI primer a√±o: ${annualROI}%\n\n`;
  
  // Caso similar
  const caso = monthlyBoxes < 5000 ? CASOS_EXITO_REALES.mercadolibre : 
               monthlyBoxes < 20000 ? CASOS_EXITO_REALES.nike : 
               CASOS_EXITO_REALES.loreal;
  
  roi += `**üìä CASO SIMILAR:**\n`;
  roi += `${caso.empresa}: ROI en ${caso.resultados.roi_meses} meses`;
  
  return roi;
}

function generateEmail(opp) {
  if (!opp) return "‚ùå No hay oportunidad seleccionada";
  
  const daysSince = opp.last_update ? 
    Math.floor((new Date() - new Date(opp.last_update)) / (1000 * 60 * 60 * 24)) : 0;
  
  const monthlyLoss = Math.round(opp.value * 0.1);
  const caso = opp.industry?.toLowerCase().includes('commerce') ? 'MercadoLibre' : 'Nike';
  
  let email = `üìß **EMAIL PARA ${opp.client}**\n\n`;
  email += `**Para:** ${opp.sponsor || opp.power_sponsor || 'Contacto'}\n`;
  
  if (daysSince > 7) {
    email += `**Asunto:** ${opp.client} - R$ ${(monthlyLoss * 12).toLocaleString('pt-BR')}/a√±o en p√©rdidas evitables\n\n`;
    email += `Hola ${opp.sponsor?.split(' ')[0] || 'equipo'},\n\n`;
    email += `Hace ${daysSince} d√≠as que no hablamos.\n\n`;
    email += `Mientras tanto, est√°n perdiendo R$ ${monthlyLoss.toLocaleString('pt-BR')}/mes en violaci√≥n de cajas.\n\n`;
  } else {
    email += `**Asunto:** Caso ${caso} - C√≥mo eliminaron 95% de violaciones\n\n`;
    email += `Hola ${opp.sponsor?.split(' ')[0] || 'equipo'},\n\n`;
  }
  
  email += `Datos r√°pidos:\n`;
  email += `‚Ä¢ P√©rdida t√≠pica del sector: 10% de cajas violadas\n`;
  email += `‚Ä¢ Para ustedes: R$ ${monthlyLoss.toLocaleString('pt-BR')}/mes\n`;
  email += `‚Ä¢ ${caso} ten√≠a el mismo problema\n`;
  email += `‚Ä¢ Hoy ahorran R$ ${caso === 'MercadoLibre' ? '180.000' : '100.000'}/mes\n\n`;
  
  email += `¬ø15 minutos esta semana para ver los n√∫meros espec√≠ficos?\n\n`;
  email += `PD: Cada mes sin actuar = R$ ${monthlyLoss.toLocaleString('pt-BR')} perdidos.\n\n`;
  email += `Saludos,\n[Tu nombre]`;
  
  return email;
}

function generateCallScript(opp) {
  if (!opp) return "‚ùå No hay oportunidad seleccionada";
  
  const monthlyBoxes = Math.round(opp.value / 100);
  const monthlyLoss = Math.round(opp.value * 0.1);
  
  let script = `üìû **SCRIPT PARA ${opp.client}**\n\n`;
  
  script += `**APERTURA (30 seg):**\n`;
  script += `"Hola ${opp.sponsor || '[nombre]'}, soy [TU NOMBRE] de Ventapel.\n`;
  script += `Vi que procesan ${monthlyBoxes.toLocaleString('pt-BR')} cajas/mes.\n`;
  script += `MercadoLibre procesaba volumen similar y perd√≠a R$ ${monthlyLoss.toLocaleString('pt-BR')}/mes.\n`;
  script += `Hoy ahorran 95% de eso. ¬ø15 minutos para mostrarle c√≥mo?"\n\n`;
  
  script += `**SI DICE "NO TENGO TIEMPO":**\n`;
  script += `"Entiendo. Solo una pregunta r√°pida:\n`;
  script += `¬øCu√°ntas cajas violadas tienen por mes?\n`;
  script += `[Esperar respuesta]\n`;
  script += `Eso son R$ [calcular] al a√±o. ¬øNo vale 15 minutos?"\n\n`;
  
  script += `**SI DICE "YA TENEMOS SOLUCI√ìN":**\n`;
  script += `"Excelente. ¬øQu√© % de efectividad tiene?\n`;
  script += `[Esperar respuesta]\n`;
  script += `Nosotros garantizamos 95% o devolvemos el dinero.\n`;
  script += `¬øVale la pena comparar?"\n\n`;
  
  script += `**SI DICE "NO ES PRIORIDAD":**\n`;
  script += `"¬øR$ ${(monthlyLoss * 12).toLocaleString('pt-BR')}/a√±o no es prioridad?\n`;
  script += `Con ROI en 3 meses, ¬øqu√© podr√≠a ser m√°s prioritario?"\n\n`;
  
  script += `**CIERRE:**\n`;
  script += `"¬øMartes 10am o jueves 3pm le viene mejor?"`;
  
  return script;
}

function generateCompleteStrategy(opp) {
  if (!opp) return "‚ùå No hay oportunidad seleccionada";
  
  const healthScore = calculateHealthScore(opp.scales);
  const dorScore = getScaleValue(opp.scales?.dor);
  const poderScore = getScaleValue(opp.scales?.poder);
  const visaoScore = getScaleValue(opp.scales?.visao);
  
  let strategy = `üéØ **ESTRATEGIA COMPLETA - ${opp.client}**\n\n`;
  
  strategy += `**üìä DIAGN√ìSTICO PPVVCC:**\n`;
  strategy += `‚Ä¢ DOR: ${dorScore}/10 ${dorScore < 5 ? 'üî¥ CR√çTICO' : dorScore < 8 ? 'üü° MEJORAR' : 'üü¢ OK'}\n`;
  strategy += `‚Ä¢ PODER: ${poderScore}/10 ${poderScore < 5 ? 'üî¥ SIN ACCESO' : poderScore < 8 ? 'üü° PARCIAL' : 'üü¢ TOTAL'}\n`;
  strategy += `‚Ä¢ VIS√ÉO: ${visaoScore}/10\n`;
  strategy += `‚Ä¢ Health Total: ${healthScore}/10\n\n`;
  
  // Identificar prioridad
  let priority = '';
  let action = '';
  
  if (dorScore < 5) {
    priority = 'üî¥ PRIORIDAD 1: ELEVAR DOLOR';
    action = 'Sin dolor admitido NO HAY VENTA. Aplicar SPIN inmediatamente.';
  } else if (poderScore < 5) {
    priority = 'üü° PRIORIDAD 2: ACCEDER AL DECISOR';
    action = 'Identificar y acceder al Power Sponsor esta semana.';
  } else if (visaoScore < 5) {
    priority = 'üîµ PRIORIDAD 3: CONSTRUIR VISI√ìN';
    action = 'Demo con caso de √©xito y ROI espec√≠fico.';
  } else {
    priority = '‚úÖ LISTO PARA CERRAR';
    action = 'Proponer prueba piloto o contrato.';
  }
  
  strategy += `**${priority}**\n`;
  strategy += `${action}\n\n`;
  
  strategy += `**üìã PLAN DE ACCI√ìN (5 D√çAS):**\n\n`;
  
  strategy += `**D√çA 1-2:** ${dorScore < 5 ? 'Llamada SPIN para elevar dolor' : 'Mantener momentum'}\n`;
  strategy += `**D√çA 3:** ${poderScore < 5 ? 'Email pidiendo acceso al decisor' : 'Confirmar pr√≥ximos pasos'}\n`;
  strategy += `**D√çA 4:** ${visaoScore < 5 ? 'Demo con ROI calculado' : 'Enviar propuesta'}\n`;
  strategy += `**D√çA 5:** Follow-up y definir fecha de decisi√≥n\n\n`;
  
  // Script de apertura
  strategy += `**üìû SCRIPT DE HOY:**\n`;
  strategy += `"${opp.sponsor || 'Hola'}, `;
  
  if (dorScore < 5) {
    strategy += `necesito validar algo: ¬øcu√°ntas cajas violadas tienen por mes?"`;
  } else if (poderScore < 5) {
    strategy += `para avanzar necesito 15 min con quien aprueba inversiones. ¬øQui√©n ser√≠a?"`;
  } else {
    strategy += `ya tenemos todo listo. ¬øEmpezamos con prueba piloto o vamos directo al contrato?"`;
  }
  
  return strategy;
}

// ============= LLAMADA A CLAUDE API MEJORADA =============
async function callClaudeAPI(opportunityData, userInput, ventapelContext, toolsAvailable) {
  const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
  
  if (!ANTHROPIC_API_KEY) {
    console.log('‚ö†Ô∏è Claude API no configurada, usando an√°lisis local');
    return { type: 'fallback', content: analyzeOpportunityLocal(opportunityData) };
  }

  // Descripci√≥n de herramientas disponibles
  const toolDescriptions = toolsAvailable.map(t => 
    `- **${t.name}**: ${t.description}`
  ).join('\n');

  const promptTemplate = `Eres "Ventus", un coach de ventas de clase mundial y experto absoluto en la metodolog√≠a PPVVCC de Ventapel Brasil. Tu objetivo es ayudar a los vendedores a CERRAR DEALS proporcionando estrategias y acciones concretas.

**REGLAS FUNDAMENTALES:**
1. **SIEMPRE BASADO EN DATOS:** Analiza la oportunidad y los casos de √©xito. No inventes informaci√≥n.
2. **ACCI√ìN CONCRETA:** Proporciona siempre un paso siguiente claro y ejecutable.
3. **RESPUESTA DIRECTA:** Usa Markdown para formato. S√© conciso pero completo.
4. **PERSONALIZACI√ìN:** Adapta tu respuesta al contexto espec√≠fico del cliente.

---
**CONTEXTO DE LA OPORTUNIDAD:**
${JSON.stringify(opportunityData, null, 2)}

**CASOS DE √âXITO VENTAPEL:**
${JSON.stringify(ventapelContext.casos, null, 2)}

**SOLICITUD DEL VENDEDOR:**
"${userInput}"

---
**HERRAMIENTAS DISPONIBLES:**
Puedes usar estas herramientas para obtener informaci√≥n precisa. Si necesitas usar una herramienta, responde √öNICAMENTE con:
\`\`\`json
{"tool_to_use": "nombre_de_la_herramienta"}
\`\`\`

${toolDescriptions}

---
**INSTRUCCIONES:**
1. Analiza la solicitud del vendedor en el contexto de la oportunidad
2. Si puedes dar una respuesta completa y personalizada directamente, hazlo
3. Si necesitas datos espec√≠ficos de una herramienta (como c√°lculos de ROI exactos), solic√≠tala
4. Considera el estado PPVVCC actual para personalizar tu respuesta
5. Siempre incluye un pr√≥ximo paso accionable

Responde de forma natural, como un coach experto que conoce bien el negocio y al cliente.`;

  try {
    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": ANTHROPIC_API_KEY,
        "anthropic-version": "2023-06-01"
      },
      body: JSON.stringify({
        model: "claude-3-sonnet-20240229",
        max_tokens: 1000,
        temperature: 0.3,
        messages: [
          { role: "user", content: promptTemplate }
        ]
      })
    });

    if (!response.ok) {
      console.log('‚ùå Error en Claude API:', response.status);
      return { type: 'fallback', content: analyzeOpportunityLocal(opportunityData) };
    }

    const data = await response.json();
    const responseText = data.content[0].text;
    
    // Verificar si Claude est√° pidiendo una herramienta
    if (responseText.includes('```json') && responseText.includes('tool_to_use')) {
      try {
        const jsonMatch = responseText.match(/```json\n?(.*?)\n?```/s);
        if (jsonMatch) {
          const toolRequest = JSON.parse(jsonMatch[1]);
          if (toolRequest.tool_to_use) {
            return { type: 'tool_request', tool: toolRequest.tool_to_use };
          }
        }
      } catch (e) {
        console.log('No es una solicitud de herramienta v√°lida');
      }
    }
    
    return { type: 'direct_response', content: responseText };
    
  } catch (error) {
    console.error('‚ùå Error llamando a Claude:', error);
    return { type: 'fallback', content: analyzeOpportunityLocal(opportunityData) };
  }
}

async function callClaudeWithToolResult(opportunityData, userInput, toolName, toolResult, ventapelContext) {
  const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
  
  if (!ANTHROPIC_API_KEY) {
    return toolResult; // Fallback: devolver el resultado de la herramienta directamente
  }

  const promptTemplate = `Eres "Ventus", coach de ventas experto en PPVVCC de Ventapel Brasil.

El vendedor pregunt√≥: "${userInput}"

Para responder mejor, ejecutaste la herramienta "${toolName}" que devolvi√≥:

--- RESULTADO DE LA HERRAMIENTA ---
${toolResult}
--- FIN DEL RESULTADO ---

**CONTEXTO DEL CLIENTE:**
${JSON.stringify(opportunityData, null, 2)}

**CASOS DE √âXITO RELEVANTES:**
${JSON.stringify(ventapelContext.casos, null, 2)}

**TAREA:**
1. Usa el resultado de la herramienta como base para tu respuesta
2. Enriquece la respuesta con insights adicionales basados en el contexto
3. Personaliza la respuesta para este cliente espec√≠fico
4. Si es relevante, menciona casos de √©xito similares
5. SIEMPRE termina con un pr√≥ximo paso claro y accionable

Responde en formato Markdown, siendo profesional pero cercano.`;

  try {
    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": ANTHROPIC_API_KEY,
        "anthropic-version": "2023-06-01"
      },
      body: JSON.stringify({
        model: "claude-3-sonnet-20240229",
        max_tokens: 1000,
        temperature: 0.3,
        messages: [
          { role: "user", content: promptTemplate }
        ]
      })
    });

    if (!response.ok) {
      console.log('‚ùå Error en segunda llamada a Claude');
      return toolResult; // Fallback al resultado de la herramienta
    }

    const data = await response.json();
    return data.content[0].text;
    
  } catch (error) {
    console.error('‚ùå Error en segunda llamada a Claude:', error);
    return toolResult; // Fallback al resultado de la herramienta
  }
}

// ============= HANDLER PRINCIPAL - ORQUESTADOR CLAUDE-FIRST =============
export default async function handler(req) {
  if (req.method !== 'POST') {
    return new Response(
      JSON.stringify({ error: 'Method not allowed' }),
      { status: 405, headers: { 'Content-Type': 'application/json' } }
    );
  }

  try {
    const body = await req.json();
    const { userInput, opportunityData, vendorName } = body;

    console.log('üß† Backend recibi√≥:', { 
      userInput: userInput?.substring(0, 50), 
      hasOpportunity: !!opportunityData,
      vendor: vendorName 
    });

    // Validaci√≥n b√°sica
    if (!opportunityData) {
      return new Response(
        JSON.stringify({ 
          response: "‚ùå **No hay cliente seleccionado**\n\nSelecciona un cliente del CRM para que pueda ayudarte con estrategias espec√≠ficas." 
        }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    }

    if (!userInput || userInput.trim() === '') {
      return new Response(
        JSON.stringify({ 
          response: "‚ùì **¬øEn qu√© puedo ayudarte?**\n\nPreg√∫ntame sobre estrategias, objeciones, ROI, o cualquier aspecto de la venta." 
        }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // Definir las herramientas disponibles
    const availableTools = [
      { 
        name: 'analizar', 
        description: 'An√°lisis PPVVCC completo con diagn√≥stico y pr√≥ximos pasos',
        function: analyzeOpportunityLocal 
      },
      { 
        name: 'dolor', 
        description: 'Estrategia SPIN y script para elevar el dolor del cliente',
        function: generatePainStrategy 
      },
      { 
        name: 'roi', 
        description: 'C√°lculo detallado de ROI con payback y casos similares',
        function: calculateROI 
      },
      { 
        name: 'email', 
        description: 'Email de venta personalizado con casos de √©xito',
        function: generateEmail 
      },
      { 
        name: 'llamada', 
        description: 'Script de llamada con manejo de objeciones comunes',
        function: generateCallScript 
      },
      { 
        name: 'estrategia', 
        description: 'Plan de acci√≥n completo de 5 d√≠as basado en PPVVCC',
        function: generateCompleteStrategy 
      }
    ];

    // ============= PRIMERA LLAMADA A CLAUDE =============
    console.log('ü§ñ Llamando a Claude para:', userInput);
    
    const claudeResponse = await callClaudeAPI(
      opportunityData,
      userInput,
      { casos: CASOS_EXITO_REALES },
      availableTools
    );

    // Procesar respuesta de Claude
    if (claudeResponse.type === 'tool_request') {
      // Claude pidi√≥ una herramienta
      const toolName = claudeResponse.tool;
      const tool = availableTools.find(t => t.name === toolName);
      
      if (tool) {
        console.log(`üîß Ejecutando herramienta: ${toolName}`);
        const toolResult = tool.function(opportunityData);
        
        // ============= SEGUNDA LLAMADA A CLAUDE CON RESULTADO =============
        console.log('ü§ñ Enviando resultado de herramienta a Claude');
        const finalResponse = await callClaudeWithToolResult(
          opportunityData,
          userInput,
          toolName,
          toolResult,
          { casos: CASOS_EXITO_REALES }
        );
        
        return new Response(
          JSON.stringify({ response: finalResponse }),
          { status: 200, headers: { 'Content-Type': 'application/json' } }
        );
      } else {
        console.log(`‚ùå Herramienta no encontrada: ${toolName}`);
        // Si no encuentra la herramienta, usar an√°lisis local
        return new Response(
          JSON.stringify({ response: analyzeOpportunityLocal(opportunityData) }),
          { status: 200, headers: { 'Content-Type': 'application/json' } }
        );
      }
    } else if (claudeResponse.type === 'direct_response') {
      // Claude respondi√≥ directamente
      console.log('‚úÖ Claude respondi√≥ directamente');
      return new Response(
        JSON.stringify({ response: claudeResponse.content }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    } else {
      // Fallback
      console.log('‚ö†Ô∏è Usando fallback local');
      return new Response(
        JSON.stringify({ response: claudeResponse.content }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    }

  } catch (error) {
    console.error('‚ùå Error en backend:', error);
    
    return new Response(
      JSON.stringify({ 
        response: '‚ùå **Error procesando solicitud**\n\nPor favor, intenta de nuevo o reformula tu pregunta.',
        error: error.message 
      }),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  }
}
