import React, { useState, useEffect } from 'react';
import { MessageCircle, X, Send, Loader, Phone, DollarSign, Shield, Zap, Target, AlertTriangle, CheckCircle, Brain, FileText, ArrowRight, Clock, TrendingUp, XCircle, ChevronDown, Users, Sparkles } from 'lucide-react';
import { VENTAPEL_COMMERCIAL_CONTEXT, PPVVCC_SCORING_GUIDE, ROI_CALCULATION_TEMPLATE, OBJECTION_HANDLING_SCRIPTS, SUCCESS_STORIES_DETAILED } from './contexts/VentapelCommercialContext';

// Interfaces
interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface Opportunity {
  id: number;
  name: string;
  client: string;
  vendor: string;
  value: number;
  stage: number;
  priority: string;
  probability: number;
  expected_close?: string;
  next_action?: string;
  product?: string;
  scales: {
    dor: { score: number; description: string };
    poder: { score: number; description: string };
    visao: { score: number; description: string };
    valor: { score: number; description: string };
    controle: { score: number; description: string };
    compras: { score: number; description: string };
  };
}

interface AIAssistantProps {
  opportunities: Opportunity[];
  currentOpportunity?: Opportunity | null;
}

// Funciones auxiliares para llamar a las APIs
const searchWeb = async (query: string): Promise<any> => {
  try {
    const response = await fetch('/api/assistant', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'search',
        data: {
          q: query,
          gl: 'br',
          hl: 'pt',
          num: 10
        }
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || `HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error searching web:', error);
    throw error;
  }
};

const generateWithClaude = async (messages: any[], system?: string): Promise<string> => {
  // System prompt AGRESIVO para VENDER
  const salesKillerPrompt = `
${VENTAPEL_COMMERCIAL_CONTEXT}

${PPVVCC_SCORING_GUIDE || ''}

${ROI_CALCULATION_TEMPLATE || ''}

SCRIPTS DE MANEJO DE OBJECIONES:
${OBJECTION_HANDLING_SCRIPTS ? JSON.stringify(OBJECTION_HANDLING_SCRIPTS, null, 2) : ''}

CASOS DE √âXITO PARA USAR:
${SUCCESS_STORIES_DETAILED ? JSON.stringify(SUCCESS_STORIES_DETAILED, null, 2) : ''}

üî• INSTRUCCIONES CR√çTICAS - MODO VENDEDOR KILLER üî•

TU √öNICO OBJETIVO: Ayudar al vendedor a CERRAR DEALS YA.

REGLAS INQUEBRANTABLES:
1. M√°ximo 3-4 bullets por respuesta
2. SIEMPRE terminar con "‚ö° PR√ìXIMA ACCI√ìN: [algo espec√≠fico para hacer YA]"
3. Usar verbos de acci√≥n: "Llam√°", "Envi√°", "Ped√≠", "Cerr√°", "Presion√°"
4. Dar scripts EXACTOS, palabra por palabra
5. Crear URGENCIA en cada interacci√≥n
6. NO an√°lisis largos, solo ACCIONES

FORMATO DE RESPUESTA PARA OBJECIONES:
üéØ OBJECI√ìN DETECTADA: [cual es]
üí¨ RESPUESTA EXACTA: "[script palabra por palabra]"
üìä DATO KILLER: [caso o n√∫mero que destruye la objeci√≥n]
‚ö° PR√ìXIMA ACCI√ìN: [qu√© hacer inmediatamente]

FORMATO PARA CIERRE:
üí∞ T√âCNICA: [nombre de la t√©cnica]
üó£Ô∏è SCRIPT: "[exactamente qu√© decir]"
‚è∞ CREAR URGENCIA: "[frase espec√≠fica]"
‚ö° PR√ìXIMA ACCI√ìN: [cerrar o siguiente paso]

LENGUAJE:
- Directo, sin vueltas (estilo Tom√°s)
- Argentino/Brasile√±o seg√∫n el cliente
- Confianza total: "Esto se cierra hoy"
- Mentalidad ganadora SIEMPRE

ALERTAS PROACTIVAS:
- Si hay m√°s de 7 d√≠as sin contacto: "üî• ALERTA: Llamar YA o se enfr√≠a"
- Si PPVVCC > 40: "üíé MADURO PARA CIERRE - Pedir la orden HOY"
- Si DOLOR > 7: "üéØ Cliente con dolor alto - PRESIONAR para demo YA"

${system ? `\nCONTEXTO ADICIONAL: ${system}` : ''}

Ahora respond√© como el mejor closer de Ventapel. Cada palabra debe empujar hacia el CIERRE.
`;

  try {
    const response = await fetch('/api/assistant', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'claude',
        data: {
          model: 'claude-3-5-sonnet-20241022',
          max_tokens: 4096,
          messages: messages,
          system: salesKillerPrompt
        }
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.content[0].text;
  } catch (error) {
    console.error('Error generating with Claude:', error);
    throw error;
  }
};

// Componente de Alertas de Venta
const SalesAlerts: React.FC<{ opportunities: Opportunity[] }> = ({ opportunities }) => {
  const alerts = React.useMemo(() => {
    const urgentAlerts = [];
    
    for (const opp of opportunities) {
      const totalScore = Object.values(opp.scales).reduce((sum, s) => sum + s.score, 0);
      
      // Oportunidades maduras para cerrar
      if (totalScore > 40) {
        urgentAlerts.push({
          type: 'close',
          icon: DollarSign,
          color: 'text-green-600 bg-green-100',
          message: `üíé ${opp.client} est√° MADURO (score ${totalScore}/60) - CERRAR YA`,
          action: `Llamar HOY y pedir la orden`
        });
      }
      
      // Alto dolor sin acci√≥n
      if (opp.scales.dor.score >= 7 && opp.scales.poder.score < 5) {
        urgentAlerts.push({
          type: 'poder',
          icon: Target,
          color: 'text-red-600 bg-red-100',
          message: `üî• ${opp.client} tiene DOLOR alto (${opp.scales.dor.score}) pero no ten√©s al decisor`,
          action: `Exigir reuni√≥n con el jefe HOY`
        });
      }
      
      // Oportunidades enfri√°ndose
      const lastUpdate = new Date(opp.expected_close || new Date());
      const daysSince = Math.floor((new Date().getTime() - lastUpdate.getTime()) / (1000 * 3600 * 24));
      if (daysSince > 7) {
        urgentAlerts.push({
          type: 'cold',
          icon: AlertTriangle,
          color: 'text-yellow-600 bg-yellow-100',
          message: `‚ö†Ô∏è ${opp.client} - ${daysSince} d√≠as sin contacto - SE ENFR√çA`,
          action: `WhatsApp AHORA: "Tengo novedades importantes"`
        });
      }
    }
    
    return urgentAlerts.slice(0, 3); // Top 3 alertas
  }, [opportunities]);

  if (alerts.length === 0) return null;

  return (
    <div className="space-y-2 p-3 bg-red-50 border-b border-red-200">
      <h4 className="font-bold text-sm text-red-800 flex items-center">
        <Zap className="w-4 h-4 mr-1 animate-pulse" />
        ACCIONES URGENTES - HACER YA
      </h4>
      {alerts.map((alert, idx) => {
        const Icon = alert.icon;
        return (
          <div key={idx} className={`p-2 rounded-lg flex items-start ${alert.color}`}>
            <Icon className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
            <div className="flex-1">
              <p className="text-xs font-semibold">{alert.message}</p>
              <p className="text-xs mt-1">‚Üí {alert.action}</p>
            </div>
          </div>
        );
      })}
    </div>
  );
};

// Componente principal AIAssistant
const AIAssistant: React.FC<AIAssistantProps> = ({ opportunities, currentOpportunity }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Quick Actions KILLER para VENDER
  const quickActions = [
    { 
      icon: Phone, 
      label: 'üìû Qu√© decir AHORA', 
      action: 'call_script',
      color: 'hover:bg-green-100 hover:border-green-500'
    },
    { 
      icon: DollarSign, 
      label: 'üí∞ CERRAR este deal', 
      action: 'close_now',
      color: 'hover:bg-yellow-100 hover:border-yellow-500'
    },
    { 
      icon: Shield, 
      label: 'üö´ Vencer objeci√≥n', 
      action: 'objection',
      color: 'hover:bg-red-100 hover:border-red-500'
    },
    { 
      icon: Zap, 
      label: '‚ö° Crear URGENCIA', 
      action: 'urgency',
      color: 'hover:bg-orange-100 hover:border-orange-500'
    },
    { 
      icon: Target, 
      label: 'üéØ Pr√≥ximo paso', 
      action: 'next_step',
      color: 'hover:bg-blue-100 hover:border-blue-500'
    },
    { 
      icon: FileText, 
      label: 'üìß Email que cierra', 
      action: 'email_template',
      color: 'hover:bg-purple-100 hover:border-purple-500'
    }
  ];

  // Comandos r√°pidos
  const quickCommands = {
    '/llamada': 'call_script',
    '/cerrar': 'close_now',
    '/objecion': 'objection',
    '/urgencia': 'urgency',
    '/siguiente': 'next_step',
    '/email': 'email_template',
    '/precio': 'price_objection',
    '/competencia': 'competition',
    '/demo': 'demo_script'
  };

  const handleQuickAction = async (action: string) => {
    if (!currentOpportunity && action !== 'general') {
      setInputMessage('‚ö†Ô∏è Seleccion√° una oportunidad primero');
      return;
    }

    const prompts: { [key: string]: string } = {
      call_script: `Dame el script EXACTO para llamar a ${currentOpportunity?.client} AHORA.

Contexto:
- Etapa: ${currentOpportunity?.stage}
- Score DOLOR: ${currentOpportunity?.scales.dor.score}
- Score PODER: ${currentOpportunity?.scales.poder.score}
- √öltimo contacto: ${currentOpportunity?.next_action}

Necesito:
1. Primera frase para abrir (m√°x 2 l√≠neas)
2. Pregunta poderosa para crear dolor
3. C√≥mo pedir la reuni√≥n/demo
4. Si dice "no tengo tiempo": respuesta exacta
5. Cierre de la llamada

TODO palabra por palabra, listo para leer.`,
      
      close_now: `ESTRATEGIA PARA CERRAR ${currentOpportunity?.client} HOY.

Situaci√≥n:
- Valor: R$ ${currentOpportunity?.value.toLocaleString('pt-BR')}
- Score total PPVVCC: ${Object.values(currentOpportunity?.scales || {}).reduce((sum, s) => sum + s.score, 0)}/60
- Producto: ${currentOpportunity?.product}

Dame:
1. T√©cnica de cierre espec√≠fica a usar
2. Script EXACTO del cierre (palabra por palabra)
3. C√≥mo crear urgencia REAL
4. Si pide descuento: respuesta exacta
5. Si dice "lo tengo que pensar": contra-respuesta
6. Frase para sellar el deal

MODO KILLER: Este deal se cierra HOY.`,
      
      objection: `MANEJO DE OBJECIONES para ${currentOpportunity?.client}.

Top 5 objeciones probables y RESPUESTA EXACTA:

1. "Es muy caro"
   ‚Üí Script completo (3 frases m√°ximo)
   ‚Üí Caso de √©xito con n√∫meros
   
2. "Ya tenemos proveedor"
   ‚Üí Script de respuesta
   ‚Üí Diferenciador KILLER
   
3. "No es el momento"
   ‚Üí Crear urgencia (script exacto)
   ‚Üí Costo de no actuar
   
4. "Necesito pensarlo"
   ‚Üí T√©cnica para cerrar ahora
   ‚Üí Pregunta que compromete
   
5. "No veo el ROI"
   ‚Üí N√∫meros espec√≠ficos
   ‚Üí Garant√≠a para ofrecer

Para cada una: QU√â DECIR EXACTAMENTE.`,
      
      urgency: `Crear URGENCIA REAL para ${currentOpportunity?.client}.

Dame 5 formas de crear urgencia HOY:
1. Urgencia por precio (qu√© decir exacto)
2. Urgencia por disponibilidad 
3. Urgencia por competencia
4. Urgencia por p√©rdida actual
5. Urgencia por oportunidad √∫nica

Para cada una:
- Script exacto (m√°x 2 frases)
- Por qu√© funciona
- Cu√°ndo usarla

OBJETIVO: Que firme esta semana.`,
      
      next_step: `PR√ìXIMA ACCI√ìN EXACTA para ${currentOpportunity?.client}.

Estado actual:
- Etapa: ${currentOpportunity?.stage}
- Scores PPVVCC: ${JSON.stringify(currentOpportunity?.scales)}
- √öltimo contacto: ${currentOpportunity?.next_action}

Dame:
1. QU√â hacer en las pr√≥ximas 24 horas (espec√≠fico)
2. A QUI√âN contactar y c√≥mo encontrarlo
3. QU√â decir/escribir (script exacto)
4. QU√â documento/demo preparar
5. C√ìMO asegurar la siguiente reuni√≥n
6. Plan B si no responde

S√â ESPEC√çFICO: Nada de "hacer seguimiento", quiero acciones exactas.`,
      
      email_template: `Email KILLER para ${currentOpportunity?.client}.

Necesito email listo para copiar/pegar:

OPCI√ìN A - Email para conseguir reuni√≥n
- Asunto que garantiza apertura
- Cuerpo (m√°x 5 l√≠neas)
- Call to action claro

OPCI√ìN B - Email post-demo para cerrar
- Asunto urgente
- Recordar valor principal (1 l√≠nea)
- Crear urgencia
- Pedir la orden

OPCI√ìN C - Email para reactivar (no responde)
- Asunto provocador
- Mensaje super corto
- Pregunta que obliga respuesta

Formato listo para enviar.`,

      price_objection: `OBJECI√ìN DE PRECIO para ${currentOpportunity?.client}.

"Es muy caro" / "No tenemos presupuesto"

Dame:
1. SCRIPT EXACTO de respuesta (m√©todo Ventapel)
2. C√≥mo convertir precio en inversi√≥n
3. Caso de √©xito con ROI espec√≠fico
4. C√°lculo de p√©rdida actual (n√∫meros)
5. Opciones de pago/financiaci√≥n disponibles
6. Pregunta de cierre post-objeci√≥n

Todo palabra por palabra, probado y efectivo.`,

      competition: `${currentOpportunity?.client} menciona COMPETIDORES.

Respuestas EXACTAS para:
1. "Estamos viendo a 3M tambi√©n"
2. "El otro proveedor es m√°s barato"
3. "Ya trabajamos con [competidor]"
4. "Vamos a comparar propuestas"

Para cada situaci√≥n:
- Script de respuesta (m√°x 3 frases)
- Diferenciador √öNICO de Ventapel
- Pregunta para retomar control
- C√≥mo evitar guerra de precios

OBJETIVO: Ganar sin bajar precio.`,

      demo_script: `DEMO PERFECTA para ${currentOpportunity?.client}.

Gui√≥n de demo que VENDE:
1. Apertura (crear expectativa) - 1 min
2. Dolor principal a atacar - 2 min
3. Soluci√≥n Ventapel (solo lo relevante) - 3 min
4. Caso de √©xito similar - 2 min
5. ROI espec√≠fico para ellos - 2 min
6. Cierre con pr√≥ximos pasos - 1 min

Para cada parte:
- Qu√© decir EXACTAMENTE
- Qu√© mostrar/demostrar
- Pregunta de confirmaci√≥n

Total: 11 minutos que cierran deals.`
    };

    if (prompts[action]) {
      setInputMessage(prompts[action]);
      await handleSendMessage(prompts[action]);
    }
  };

  const handleSendMessage = async (messageText?: string) => {
    let text = messageText || inputMessage;
    
    // Chequear comandos r√°pidos
    const command = text.trim().toLowerCase();
    if (quickCommands[command]) {
      await handleQuickAction(quickCommands[command]);
      return;
    }

    if (!text.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: text,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      let assistantResponse = '';

      // Detectar necesidad de b√∫squeda
      if (text.toLowerCase().includes('busca') || 
          text.toLowerCase().includes('investiga') || 
          text.toLowerCase().includes('informaci√≥n')) {
        
        const searchQuery = text.replace(/busca|investiga|informaci√≥n|sobre|empresa|la|el|de/gi, '').trim();
        
        try {
          const searchResults = await searchWeb(searchQuery + ' Brasil empresa');
          
          const searchContext = searchResults.organic?.slice(0, 3).map((result: any) => 
            `${result.title}: ${result.snippet}`
          ).join('\n\n') || 'No se encontraron resultados';

          const claudeMessages = [
            { 
              role: 'user', 
              content: `Info encontrada sobre "${searchQuery}":\n\n${searchContext}\n\nDame ACCIONES ESPEC√çFICAS para venderles. ${text}` 
            }
          ];

          assistantResponse = await generateWithClaude(claudeMessages);
        } catch (error) {
          assistantResponse = '‚ùå Error en b√∫squeda. Igual te doy acciones para vender.';
        }
      } else {
        // Respuesta normal con contexto
        const opportunityContext = currentOpportunity ? `
OPORTUNIDAD ACTUAL - ${currentOpportunity.name}:
- Cliente: ${currentOpportunity.client}
- Valor: R$ ${currentOpportunity.value.toLocaleString('pt-BR')}
- Etapa: ${currentOpportunity.stage}
- Producto: ${currentOpportunity.product || 'No definido'}

SCORES PPVVCC:
- DOR: ${currentOpportunity.scales.dor.score}/10
- PODER: ${currentOpportunity.scales.poder.score}/10  
- VIS√ÉO: ${currentOpportunity.scales.visao.score}/10
- VALOR: ${currentOpportunity.scales.valor.score}/10
- CONTROLE: ${currentOpportunity.scales.controle.score}/10
- COMPRAS: ${currentOpportunity.scales.compras.score}/10
- TOTAL: ${Object.values(currentOpportunity.scales).reduce((sum, s) => sum + s.score, 0)}/60

${Object.values(currentOpportunity.scales).reduce((sum, s) => sum + s.score, 0) > 40 ? 
  'üî• ALERTA: OPORTUNIDAD MADURA - PRESIONAR PARA CIERRE' : 
  '‚ö†Ô∏è NECESITA TRABAJO - SUBIR SCORES BAJOS URGENTE'}
        ` : '';

        const claudeMessages = [
          { 
            role: 'user', 
            content: `${opportunityContext}\n\n${text}` 
          }
        ];

        assistantResponse = await generateWithClaude(claudeMessages);
      }

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: assistantResponse,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Error:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: '‚ùå Error. Igual hac√© esto: Llam√° al cliente AHORA y ped√≠ la reuni√≥n. No esperes.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {/* Bot√≥n flotante */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="fixed bottom-6 right-6 bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-full p-4 shadow-lg hover:shadow-xl transition-all z-50 flex items-center group animate-pulse hover:animate-none"
      >
        <Zap className="w-6 h-6" />
        <span className="ml-2 max-w-0 overflow-hidden group-hover:max-w-xs transition-all duration-300 whitespace-nowrap font-bold">
          VENDER AHORA
        </span>
        <DollarSign className="w-4 h-4 ml-2" />
      </button>

      {/* Panel del asistente */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 w-[450px] bg-white rounded-xl shadow-2xl border-2 border-red-500 z-50 flex flex-col" style={{ height: '650px' }}>
          {/* Header */}
          <div className="bg-gradient-to-r from-red-600 to-orange-600 text-white p-4 rounded-t-xl flex justify-between items-center">
            <div className="flex items-center">
              <DollarSign className="w-6 h-6 mr-2 animate-pulse" />
              <h3 className="font-bold text-lg">VENTAPEL SALES KILLER</h3>
              <Zap className="w-5 h-5 ml-2 text-yellow-300" />
            </div>
            <button onClick={() => setIsOpen(false)} className="hover:bg-white/20 p-1 rounded">
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Sales Alerts */}
          {opportunities.length > 0 && (
            <SalesAlerts opportunities={opportunities} />
          )}

          {/* Quick Actions GRID */}
          <div className="p-3 border-b bg-gradient-to-r from-gray-50 to-red-50">
            <div className="grid grid-cols-3 gap-2">
              {quickActions.map((action, idx) => {
                const Icon = action.icon;
                return (
                  <button
                    key={idx}
                    onClick={() => handleQuickAction(action.action)}
                    className={`flex flex-col items-center p-2 bg-white border-2 border-gray-300 rounded-lg transition-all ${action.color} hover:scale-105`}
                  >
                    <Icon className="w-5 h-5 text-red-600 mb-1" />
                    <span className="text-xs font-bold text-gray-700">{action.label}</span>
                  </button>
                );
              })}
            </div>
            
            {/* Comandos r√°pidos info */}
            <div className="mt-2 text-xs text-gray-600 text-center">
              Comandos: /llamada /cerrar /objecion /precio /demo
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
            {messages.length === 0 && (
              <div className="text-center text-gray-700 mt-8">
                <div className="text-4xl mb-3">üí∞üî•üéØ</div>
                <p className="text-sm font-bold">ASISTENTE KILLER ACTIVADO</p>
                <p className="text-xs mt-2 text-red-600 font-semibold">Objetivo: CERRAR DEALS</p>
                
                <div className="mt-4 p-3 bg-white rounded-lg border-2 border-red-200">
                  <p className="text-xs font-bold text-gray-700 mb-2">LO QUE HAGO:</p>
                  <ul className="text-xs space-y-1 text-left">
                    <li>‚úÖ Scripts exactos para llamadas</li>
                    <li>‚úÖ T√©cnicas de cierre que funcionan</li>
                    <li>‚úÖ Respuestas a TODAS las objeciones</li>
                    <li>‚úÖ Emails que consiguen reuniones</li>
                    <li>‚úÖ Crear urgencia real</li>
                    <li>‚úÖ Pr√≥ximos pasos espec√≠ficos</li>
                  </ul>
                </div>
                
                <p className="text-xs mt-3 text-red-600 font-bold animate-pulse">
                  Seleccion√° una oportunidad y VAMOS A VENDER
                </p>
              </div>
            )}
            
            {messages.map(message => (
              <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-[85%] p-3 rounded-lg ${
                  message.role === 'user' 
                    ? 'bg-gradient-to-r from-red-600 to-orange-600 text-white font-medium' 
                    : 'bg-white text-gray-800 border-2 border-red-200 shadow-md'
                }`}>
                  <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                  <p className="text-xs mt-1 opacity-70">
                    {message.timestamp.toLocaleTimeString('es-AR', { hour: '2-digit', minute: '2-digit' })}
                  </p>
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-white p-3 rounded-lg border-2 border-red-200 shadow-md">
                  <div className="flex items-center">
                    <Loader className="w-5 h-5 animate-spin text-red-600 mr-2" />
                    <span className="text-xs text-gray-600">Preparando estrategia killer...</span>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Input */}
          <div className="p-4 border-t-2 border-red-200 bg-white rounded-b-xl">
            <div className="flex space-x-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !isLoading && handleSendMessage()}
                placeholder="¬øC√≥mo cierro este deal? ¬øQu√© le digo?"
                className="flex-1 p-2 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 text-sm font-medium"
                disabled={isLoading}
              />
              <button
                onClick={() => handleSendMessage()}
                disabled={isLoading || !inputMessage.trim()}
                className="p-2 bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-lg hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed animate-pulse hover:animate-none"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

// Export default
export default AIAssistant;
